var documenterSearchIndex = {"docs":
[{"location":"nnm.html#Nitrate-Network-Model","page":"Nitrate Network Model","title":"Nitrate Network Model","text":"","category":"section"},{"location":"nnm.html#Function-documentation","page":"Nitrate Network Model","title":"Function documentation","text":"","category":"section"},{"location":"nnm.html","page":"Nitrate Network Model","title":"Nitrate Network Model","text":"StreamModel\nStreamModel(::String, ::String)\nevaluate!(::StreamModel)\nload_from_tables\nsave_model_results","category":"page"},{"location":"nnm.html#NitrateNetworkModel.StreamModel","page":"Nitrate Network Model","title":"NitrateNetworkModel.StreamModel","text":"StreamModel(\n    mc::ModelConstants,\n    nc::NetworkConstants,\n    mv::ModelVariables\n)\n\nThe StreamModel structure is a wrapper around three other structures. ModelConstants holds values of physical and process constants that do not change during the run. NetworkConstants holds the specification of the links, their characteristics, and nitrate concentrations from the landscape. It will not change during the run, but is expected to be adapted for each management scenario. Finally, ModelVariables holds the values that are calculated during the model run. All WatershedSim functions will take the entire StreamModel as an argument, so there is no need to pull out the component structures. It is also expected that users will use the file-based constructor StreamModel(::String, ::String).\n\n\n\n\n\n","category":"type"},{"location":"nnm.html#NitrateNetworkModel.StreamModel-Tuple{String, String}","page":"Nitrate Network Model","title":"NitrateNetworkModel.StreamModel","text":"StreamModel(baseparams_file::String, network_file::String)\n\nStreamModel constructor from files. See load_from_tables for specific file formats. All this constructor does is call that function.\n\n\n\n\n\n","category":"method"},{"location":"nnm.html#NitrateNetworkModel.evaluate!-Tuple{StreamModel}","page":"Nitrate Network Model","title":"NitrateNetworkModel.evaluate!","text":"evaluate!(model::StreamModel; qgage::Float64, contrib_n_load_reduction::Union{nothing,Array{Float64,1}})\n\nMain model function. Assumes that model.nc has already been updated to reflect the desired management scenario, e.g. updates to model.nc.contrib_n_load_factor or model.nc.feature and model.nc.wetland_area.\n\nIf a value for qgage is provided, the model will be run using that value as the flow measured at the link model.nc.gage_link, which is used to assign flow values to all other links. Otherwise, the model will be run using model.nc.gage_flow.\n\n#TODO: the reason I'm doing it this way is because the nc struct is currently immutable. I could switch it to mutable, but I've been avoiding that due to potential performance regressions. I should test that, since this is introduces a funny assymetry in how different model parameters are handled. \n\n\n\n\n\n","category":"method"},{"location":"nnm.html#NitrateNetworkModel.load_from_tables","page":"Nitrate Network Model","title":"NitrateNetworkModel.load_from_tables","text":"load_from_tables(baseparams_file::String, network_file::String)\n\nConstructs a StreamModel based on inputs in two csv files. The files should be structured as follows:\n\nbaseparams_file: columns \"variable\" and \"value\".\nnetwork_file: many more columns.\n\n\n\n\n\n","category":"function"},{"location":"nnm.html#NitrateNetworkModel.save_model_results","page":"Nitrate Network Model","title":"NitrateNetworkModel.save_model_results","text":"save_model_results(model::StreamModel, filename::String)\n\nWrites model results to csv file\n\n\n\n\n\n","category":"function"},{"location":"nnm.html#Results-access","page":"Nitrate Network Model","title":"Results access","text":"","category":"section"},{"location":"nnm.html","page":"Nitrate Network Model","title":"Nitrate Network Model","text":"These functions give ways of extracting key results from the model structure.","category":"page"},{"location":"nnm.html","page":"Nitrate Network Model","title":"Nitrate Network Model","text":"get_outlet_nconc\nget_avg_nconc\nget_delivery_ratios","category":"page"},{"location":"nnm.html#NitrateNetworkModel.get_outlet_nconc","page":"Nitrate Network Model","title":"NitrateNetworkModel.get_outlet_nconc","text":"get_outlet_nconc(model::StreamModel)::Float64\n\nGets nitrate concentration leaving outlet link\n\n\n\n\n\n","category":"function"},{"location":"nnm.html#NitrateNetworkModel.get_avg_nconc","page":"Nitrate Network Model","title":"NitrateNetworkModel.get_avg_nconc","text":"get_avg_nconc(model::StreamModel)::Float64\n\nGets link length-weighted nitrate concentration\n\n\n\n\n\n","category":"function"},{"location":"nnm.html#NitrateNetworkModel.get_delivery_ratios","page":"Nitrate Network Model","title":"NitrateNetworkModel.get_delivery_ratios","text":"get_delivery_ratios(model::StreamModel)::Tuple{Vector{Float64}, Vector{Float64}}\n\nReturns vectors with net delivery ratio and escape fraction for each link.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Documentation-for-WatershedSim","page":"Home","title":"Documentation for WatershedSim","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This module implements the Nitrate Network Model described in Czuba, et al. (2018).","category":"page"},{"location":"index.html#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Basic usage requires two files, one that defines model parameters and another that defines the stream network to be simulated. In the example below, these are base_params.csv and network_table.csv. Construct a StreamModel, and then evaluate!() it to run the model.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using NitrateNetworkModel\n\nstreammodel = StreamModel(\n    \"../data/base_params.csv\", \n    \"../data/network_table.csv\"\n)\nevaluate!(streammodel)\nsave_model_results(streammodel, \"../results/base_results.csv\")","category":"page"},{"location":"flow_regime.html#Flow-Regime","page":"Flow Regime","title":"Flow Regime","text":"","category":"section"},{"location":"flow_regime.html","page":"Flow Regime","title":"Flow Regime","text":"Functions to allow the basic StreamModel to be run across a range of flow values, and estimate frequency curves for nitrate concentrations based on the frequency curves for flow.","category":"page"},{"location":"flow_regime.html#Function-documentation","page":"Flow Regime","title":"Function documentation","text":"","category":"section"},{"location":"flow_regime.html","page":"Flow Regime","title":"Flow Regime","text":"FlowRegime\nFlowRegime(flowfile::String; q_gage_col, p_exceed_col, p_mass_col)\nevaluate!(::StreamModel, ::FlowRegime)\nFlowRegimeSimResults\nweighted_outlet_nconc(::FlowRegimeSimResults)\nweighted_avg_nconc(::FlowRegimeSimResults)","category":"page"},{"location":"flow_regime.html#NitrateNetworkModel.FlowRegime","page":"Flow Regime","title":"NitrateNetworkModel.FlowRegime","text":"FlowRegime(\n    q_gage::Vector{Float64},\n    p_exceed::Vector{Float64},\n    p_mass::Vector{Float64}\n)\n\nInput structure for evaluating StreamModel against multiple flow values. Single-link flow regime - values measured at gaged link.\n\n\n\n\n\n","category":"type"},{"location":"flow_regime.html#NitrateNetworkModel.FlowRegime-Tuple{String}","page":"Flow Regime","title":"NitrateNetworkModel.FlowRegime","text":"FlowRegime(flowfile::String; q_gage_col=:Q, p_exceed_col=:cp, p_mass_col=:cf)\n\nConstructor function to build FlowRegime from csv file.\n\n\n\n\n\n","category":"method"},{"location":"flow_regime.html#NitrateNetworkModel.evaluate!-Tuple{StreamModel, FlowRegime}","page":"Flow Regime","title":"NitrateNetworkModel.evaluate!","text":"evaluate!(model::StreamModel, flowregime::FlowRegime)\n\nRuns stream_model.evaluate!(model, q) for each q in flowregime.q_gage. Outlet and average concentrations are saved to a FlowRegimeSimResults struct and returned.\n\n\n\n\n\n","category":"method"},{"location":"flow_regime.html#NitrateNetworkModel.FlowRegimeSimResults","page":"Flow Regime","title":"NitrateNetworkModel.FlowRegimeSimResults","text":"FlowRegimeSimResults(\n    n_conc_outlet::Vector{Float64},\n    n_conc_avg::Vector{Float64},\n    p_mass::Vector{Float64}\n)\n\nResults structure returned by evaluate_with_flow_regime. Contains outlet and average nitrate concentration values for each of the flow values in flowregime.q_gage. flowregime.p_mass is copied over for convenience.\n\n\n\n\n\n","category":"type"},{"location":"flow_regime.html#NitrateNetworkModel.weighted_outlet_nconc-Tuple{FlowRegimeSimResults}","page":"Flow Regime","title":"NitrateNetworkModel.weighted_outlet_nconc","text":"weighted_outlet_nconc(results::FlowRegimeSimResults)\n\nConvenience function for getting probability exceedance weighted outlet concentration.\n\n\n\n\n\n","category":"method"},{"location":"flow_regime.html#NitrateNetworkModel.weighted_avg_nconc-Tuple{FlowRegimeSimResults}","page":"Flow Regime","title":"NitrateNetworkModel.weighted_avg_nconc","text":"weighted_avg_nconc(results::FlowRegimeSimResults)\n\nConvenience function for getting probability exceedance weighted average concentration.\n\n\n\n\n\n","category":"method"},{"location":"flow_regime.html#Example","page":"Flow Regime","title":"Example","text":"","category":"section"},{"location":"flow_regime.html","page":"Flow Regime","title":"Flow Regime","text":"using NitrateNetworkModel\nusing Plots\nusing Printf\n\n# required input files\nbaseparams_file = \"../data/baseparams.csv\"\nnetwork_file = \"../data/network_table.csv\"\nflowfile = \"../data/flow_values.csv\"\n\n# create the model structs\nmodel = StreamModel(baseparams_file, network_file)\nflowregime = FlowRegime(flowfile)\n\n# run the model\nresults = evaluate!(model, flowregime)\n\n# create a summary figure\nplot(flowregime.p_exceed, results.n_conc_outlet,\n    label=@sprintf \"Outlet (overall: %.2f)\" weighted_outlet_nconc(results))\nplot!(flowregime.p_exceed, results.n_conc_avg,\n    label=@sprintf \"Average (overall: %.2f)\" weighted_avg_nconc(results))\nxaxis!(\"Probability Exceedance\")\nyaxis!(\"Nitrate Concentration\")","category":"page"}]
}
